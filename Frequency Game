//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.io.*;

// Position this line where user code will be pasted.

// Driver class with main function
class GFG {
    // Main function
    public static void main(String[] args)throws IOException {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());

        // Iterating over testcases
        while (t-- > 0) {
            int n = Integer.parseInt(in.readLine());
            int arr[] = new int[n];

            String s[]=in.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) arr[i] = Integer.parseInt(s[i]);

            Geeks obj = new Geeks();
            System.out.println(obj.LargButMinFreq(arr, n));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

// Helper class to find largest number with minimum frequency
class Geeks {
    // Function to find largest number with minimum frequency
    public static int LargButMinFreq(int arr[], int n) {
        Map<Integer, Integer> mp = new HashMap<>();
    //  int n = arr.length;
     // Traverse through array elements and
     // count frequencies
     for (int i = 0; i < n; i++)
     {
         if (mp.containsKey(arr[i]))
         {
             mp.put(arr[i], mp.get(arr[i]) + 1);
         }
         else
         {
             mp.put(arr[i], 1);
         }
     }
     // Traverse through map and print frequencies
     int ele = 0;
     int min = Integer.MAX_VALUE;
     for (Map.Entry<Integer, Integer> entry : mp.entrySet())
     {
//         System.out.println(entry.getKey() + " " + entry.getValue());
         if(entry.getValue()<min)
         {
        	min = entry.getValue();
         }
     }
     //System.out.println(max);
     int max = Integer.MIN_VALUE;
     for (Map.Entry<Integer, Integer> entry : mp.entrySet())
     {
        // System.out.println(entry.getKey() + " " + entry.getValue());
         if(entry.getValue()==min)
         {
        	 if(entry.getKey()>max)
        	 {
        		 max = entry.getKey();
        	 }
         }
     }
    return max;
    }
}
